Model: "functional_1"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ input_layer_1 (InputLayer)      │ (None, 128, 128, 1)    │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_3 (Conv2D)               │ (None, 128, 128, 32)   │           320 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_3           │ (None, 128, 128, 32)   │           128 │
│ (BatchNormalization)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ activation_3 (Activation)       │ (None, 128, 128, 32)   │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling2d_3 (MaxPooling2D)  │ (None, 64, 64, 32)     │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_4 (Dropout)             │ (None, 64, 64, 32)     │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_4 (Conv2D)               │ (None, 64, 64, 64)     │        18,496 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_4           │ (None, 64, 64, 64)     │           256 │
│ (BatchNormalization)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ activation_4 (Activation)       │ (None, 64, 64, 64)     │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling2d_4 (MaxPooling2D)  │ (None, 32, 32, 64)     │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_5 (Dropout)             │ (None, 32, 32, 64)     │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_5 (Conv2D)               │ (None, 32, 32, 128)    │        73,856 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_5           │ (None, 32, 32, 128)    │           512 │
│ (BatchNormalization)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ activation_5 (Activation)       │ (None, 32, 32, 128)    │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling2d_5 (MaxPooling2D)  │ (None, 16, 16, 128)    │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_6 (Dropout)             │ (None, 16, 16, 128)    │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ flatten (Flatten)               │ (None, 32768)          │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_7 (Dropout)             │ (None, 32768)          │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_1 (Dense)                 │ (None, 1)              │        32,769 │
└─────────────────────────────────┴────────────────────────┴───────────────┘
 Total params: 126,337 (493.50 KB)
 Trainable params: 125,889 (491.75 KB)
 Non-trainable params: 448 (1.75 KB)


Epoch 1/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 826ms/step - accuracy: 0.7172 - loss: 2.0556
Epoch 1: val_accuracy improved from -inf to 0.50000, saving model to best_model_epoch01_valAcc0.5000.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
200/200 ━━━━━━━━━━━━━━━━━━━━ 176s 863ms/step - accuracy: 0.7174 - loss: 2.0509 - val_accuracy: 0.5000 - val_loss: 8.1214 - learning_rate: 0.0010
Epoch 2/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 820ms/step - accuracy: 0.8023 - loss: 0.7080
Epoch 2: val_accuracy did not improve from 0.50000
200/200 ━━━━━━━━━━━━━━━━━━━━ 202s 863ms/step - accuracy: 0.8023 - loss: 0.7078 - val_accuracy: 0.5000 - val_loss: 1.8405 - learning_rate: 0.0010
Epoch 3/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 811ms/step - accuracy: 0.8001 - loss: 0.6655
Epoch 3: val_accuracy improved from 0.50000 to 0.76125, saving model to best_model_epoch03_valAcc0.7613.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
200/200 ━━━━━━━━━━━━━━━━━━━━ 173s 864ms/step - accuracy: 0.8001 - loss: 0.6655 - val_accuracy: 0.7613 - val_loss: 0.7759 - learning_rate: 0.0010
Epoch 4/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 806ms/step - accuracy: 0.7900 - loss: 0.6954
Epoch 4: val_accuracy improved from 0.76125 to 0.87875, saving model to best_model_epoch04_valAcc0.8788.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
200/200 ━━━━━━━━━━━━━━━━━━━━ 171s 858ms/step - accuracy: 0.7901 - loss: 0.6950 - val_accuracy: 0.8788 - val_loss: 0.3259 - learning_rate: 0.0010
Epoch 5/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 819ms/step - accuracy: 0.8039 - loss: 0.5712
Epoch 5: val_accuracy did not improve from 0.87875
200/200 ━━━━━━━━━━━━━━━━━━━━ 172s 862ms/step - accuracy: 0.8038 - loss: 0.5714 - val_accuracy: 0.8612 - val_loss: 0.4097 - learning_rate: 0.0010
Epoch 6/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 815ms/step - accuracy: 0.8236 - loss: 0.5120
Epoch 6: val_accuracy improved from 0.87875 to 0.89250, saving model to best_model_epoch06_valAcc0.8925.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
200/200 ━━━━━━━━━━━━━━━━━━━━ 172s 859ms/step - accuracy: 0.8236 - loss: 0.5119 - val_accuracy: 0.8925 - val_loss: 0.2914 - learning_rate: 0.0010
Epoch 7/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 808ms/step - accuracy: 0.8363 - loss: 0.4469
Epoch 7: val_accuracy did not improve from 0.89250
200/200 ━━━━━━━━━━━━━━━━━━━━ 170s 851ms/step - accuracy: 0.8362 - loss: 0.4470 - val_accuracy: 0.8512 - val_loss: 0.3428 - learning_rate: 0.0010
Epoch 8/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 816ms/step - accuracy: 0.8343 - loss: 0.4360
Epoch 8: val_accuracy improved from 0.89250 to 0.90750, saving model to best_model_epoch08_valAcc0.9075.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
200/200 ━━━━━━━━━━━━━━━━━━━━ 173s 867ms/step - accuracy: 0.8343 - loss: 0.4360 - val_accuracy: 0.9075 - val_loss: 0.2373 - learning_rate: 0.0010
Epoch 9/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 796ms/step - accuracy: 0.8412 - loss: 0.4440
Epoch 9: val_accuracy did not improve from 0.90750
200/200 ━━━━━━━━━━━━━━━━━━━━ 166s 833ms/step - accuracy: 0.8412 - loss: 0.4439 - val_accuracy: 0.9000 - val_loss: 0.2471 - learning_rate: 0.0010
Epoch 10/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 821ms/step - accuracy: 0.8426 - loss: 0.4058
Epoch 10: val_accuracy improved from 0.90750 to 0.91250, saving model to best_model_epoch10_valAcc0.9125.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
200/200 ━━━━━━━━━━━━━━━━━━━━ 207s 858ms/step - accuracy: 0.8426 - loss: 0.4057 - val_accuracy: 0.9125 - val_loss: 0.2334 - learning_rate: 0.0010
Epoch 11/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 817ms/step - accuracy: 0.8586 - loss: 0.3543
Epoch 11: val_accuracy did not improve from 0.91250
200/200 ━━━━━━━━━━━━━━━━━━━━ 170s 851ms/step - accuracy: 0.8586 - loss: 0.3544 - val_accuracy: 0.9062 - val_loss: 0.2367 - learning_rate: 0.0010
Epoch 12/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 937ms/step - accuracy: 0.8553 - loss: 0.3666
Epoch 12: val_accuracy did not improve from 0.91250
200/200 ━━━━━━━━━━━━━━━━━━━━ 197s 988ms/step - accuracy: 0.8553 - loss: 0.3666 - val_accuracy: 0.8363 - val_loss: 0.3756 - learning_rate: 0.0010
Epoch 13/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 979ms/step - accuracy: 0.8491 - loss: 0.3846
Epoch 13: val_accuracy improved from 0.91250 to 0.91375, saving model to best_model_epoch13_valAcc0.9137.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
200/200 ━━━━━━━━━━━━━━━━━━━━ 206s 1s/step - accuracy: 0.8491 - loss: 0.3845 - val_accuracy: 0.9137 - val_loss: 0.2344 - learning_rate: 0.0010
Epoch 14/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 969ms/step - accuracy: 0.8657 - loss: 0.3290
Epoch 14: val_accuracy did not improve from 0.91375
200/200 ━━━━━━━━━━━━━━━━━━━━ 204s 1s/step - accuracy: 0.8657 - loss: 0.3290 - val_accuracy: 0.6800 - val_loss: 0.6368 - learning_rate: 0.0010
Epoch 15/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 941ms/step - accuracy: 0.8721 - loss: 0.3258
Epoch 15: val_accuracy did not improve from 0.91375

Epoch 15: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.
200/200 ━━━━━━━━━━━━━━━━━━━━ 196s 982ms/step - accuracy: 0.8721 - loss: 0.3259 - val_accuracy: 0.8450 - val_loss: 0.3612 - learning_rate: 0.0010
Epoch 16/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 891ms/step - accuracy: 0.8579 - loss: 0.3401
Epoch 16: val_accuracy did not improve from 0.91375
200/200 ━━━━━━━━━━━━━━━━━━━━ 191s 925ms/step - accuracy: 0.8579 - loss: 0.3400 - val_accuracy: 0.9137 - val_loss: 0.2280 - learning_rate: 5.0000e-04
Epoch 17/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 775ms/step - accuracy: 0.8804 - loss: 0.2959
Epoch 17: val_accuracy did not improve from 0.91375
200/200 ━━━━━━━━━━━━━━━━━━━━ 180s 816ms/step - accuracy: 0.8804 - loss: 0.2960 - val_accuracy: 0.9050 - val_loss: 0.2360 - learning_rate: 5.0000e-04
Epoch 18/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 773ms/step - accuracy: 0.8635 - loss: 0.3280
Epoch 18: val_accuracy did not improve from 0.91375
200/200 ━━━━━━━━━━━━━━━━━━━━ 165s 825ms/step - accuracy: 0.8635 - loss: 0.3279 - val_accuracy: 0.9100 - val_loss: 0.2355 - learning_rate: 5.0000e-04
Epoch 19/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 767ms/step - accuracy: 0.8672 - loss: 0.3156
Epoch 19: val_accuracy did not improve from 0.91375
200/200 ━━━━━━━━━━━━━━━━━━━━ 199s 810ms/step - accuracy: 0.8673 - loss: 0.3155 - val_accuracy: 0.9075 - val_loss: 0.2447 - learning_rate: 5.0000e-04
Epoch 20/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 796ms/step - accuracy: 0.8726 - loss: 0.3192
Epoch 20: val_accuracy improved from 0.91375 to 0.92000, saving model to best_model_epoch20_valAcc0.9200.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 
200/200 ━━━━━━━━━━━━━━━━━━━━ 168s 839ms/step - accuracy: 0.8726 - loss: 0.3191 - val_accuracy: 0.9200 - val_loss: 0.2593 - learning_rate: 5.0000e-04
Epoch 21/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 793ms/step - accuracy: 0.8775 - loss: 0.3092
Epoch 21: val_accuracy improved from 0.92000 to 0.92375, saving model to best_model_epoch21_valAcc0.9237.h5
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. 

Epoch 21: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.
200/200 ━━━━━━━━━━━━━━━━━━━━ 202s 836ms/step - accuracy: 0.8775 - loss: 0.3092 - val_accuracy: 0.9237 - val_loss: 0.2418 - learning_rate: 5.0000e-04
Epoch 22/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 777ms/step - accuracy: 0.8828 - loss: 0.2879
Epoch 22: val_accuracy did not improve from 0.92375
200/200 ━━━━━━━━━━━━━━━━━━━━ 166s 828ms/step - accuracy: 0.8828 - loss: 0.2878 - val_accuracy: 0.8900 - val_loss: 0.2839 - learning_rate: 2.5000e-04
Epoch 23/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 948ms/step - accuracy: 0.8851 - loss: 0.2944
Epoch 23: val_accuracy did not improve from 0.92375
200/200 ━━━━━━━━━━━━━━━━━━━━ 235s 994ms/step - accuracy: 0.8851 - loss: 0.2944 - val_accuracy: 0.9050 - val_loss: 0.2400 - learning_rate: 2.5000e-04
Epoch 24/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 951ms/step - accuracy: 0.8700 - loss: 0.3161
Epoch 24: val_accuracy did not improve from 0.92375
200/200 ━━━━━━━━━━━━━━━━━━━━ 200s 1s/step - accuracy: 0.8701 - loss: 0.3160 - val_accuracy: 0.9162 - val_loss: 0.2568 - learning_rate: 2.5000e-04
Epoch 25/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 937ms/step - accuracy: 0.8835 - loss: 0.2888
Epoch 25: val_accuracy did not improve from 0.92375
200/200 ━━━━━━━━━━━━━━━━━━━━ 196s 983ms/step - accuracy: 0.8834 - loss: 0.2888 - val_accuracy: 0.9125 - val_loss: 0.2370 - learning_rate: 2.5000e-04
Epoch 26/50
200/200 ━━━━━━━━━━━━━━━━━━━━ 0s 937ms/step - accuracy: 0.8894 - loss: 0.2777
Epoch 26: val_accuracy did not improve from 0.92375

Epoch 26: ReduceLROnPlateau reducing learning rate to 0.0001250000059371814.
200/200 ━━━━━━━━━━━━━━━━━━━━ 195s 974ms/step - accuracy: 0.8895 - loss: 0.2777 - val_accuracy: 0.9087 - val_loss: 0.2340 - learning_rate: 2.5000e-04
Epoch 26: early stopping
Restoring model weights from the end of the best epoch: 16.

===========================================================================================================
✅ Best model found: best_model_epoch21_valAcc0.9237.h5
WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.
✅ Model loaded successfully.
46/46 ━━━━━━━━━━━━━━━━━━━━ 8s 159ms/step - accuracy: 0.9128 - loss: 0.2673
🎯 Test Accuracy: 94.43%
46/46 ━━━━━━━━━━━━━━━━━━━━ 9s 194ms/step

📊 Classification Report:
              precision    recall  f1-score   support

       Noise       0.99      0.90      0.94       368
  Earthquake       0.91      0.99      0.95       368

    accuracy                           0.94       736
   macro avg       0.95      0.94      0.94       736
weighted avg       0.95      0.94      0.94       736

🔬 ROC AUC: 0.9942
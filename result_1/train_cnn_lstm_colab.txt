# -*- coding: utf-8 -*-
"""train_cnn_lstm_colab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17yMhDiVGELUeq4nCnBe8ENjnN-3ZZck0
"""

import shutil
import os

data_dirs = ['data/train', 'data/val', 'data/test']

for dir_path in data_dirs:
    if os.path.exists(dir_path):
        shutil.rmtree(dir_path)  # Xóa cả thư mục con và file bên trong
        os.makedirs(dir_path)    # Tạo lại thư mục rỗng


from google.colab import drive
drive.mount('/content/drive')

# 📦 Giải nén dữ liệu !unzip -q /content/drive/MyDrive/data_1.zip

# ✅ Cài đặt thư viện cần thiết !pip install tensorflow matplotlib numpy

# ✅ Load dữ liệu từ thư mục
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping

img_size = (128, 128)
batch_size = 64

# ✅ Data Augmentation nâng cao
train_gen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    zoom_range=0.2,
    shear_range=0.1,
    horizontal_flip=True,
    fill_mode='nearest'
)

val_gen = ImageDataGenerator(rescale=1./255)

train_data = train_gen.flow_from_directory(
    'data/train', target_size=img_size, color_mode='grayscale',
    batch_size=batch_size, class_mode='binary', shuffle=True)

val_data = val_gen.flow_from_directory(
    'data/val', target_size=img_size, color_mode='grayscale',
    batch_size=batch_size, class_mode='binary', shuffle=False)

# ✅ Mô hình CNN-LSTM
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Reshape, LSTM, Dense, Dropout

inputs = Input(shape=(128, 128, 1))
x = Conv2D(32, (3,3), activation='relu', padding='same')(inputs)
x = MaxPooling2D((2,2))(x)  # (64, 64, 32)
x = Conv2D(64, (3,3), activation='relu', padding='same')(x)
x = MaxPooling2D((2,2))(x)  # (32, 32, 64)

x = Reshape((32, 32 * 64))(x)  # (32, 2048)
x = LSTM(64, return_sequences=False)(x)
x = Dropout(0.5)(x)
outputs = Dense(1, activation='sigmoid')(x)

model = Model(inputs, outputs)
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

# ✅ Callback lưu mô hình tốt nhất và dừng sớm nếu không cải thiện
checkpoint = ModelCheckpoint("best_model.h5", monitor='val_accuracy', save_best_only=True, verbose=1)
earlystop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True, verbose=1)

# 🔁 Train mô hình
history = model.fit(
    train_data,
    epochs=30,
    validation_data=val_data,
    callbacks=[checkpoint, earlystop]
)

# 🧪 Đánh giá mô hình trên test
test_gen = ImageDataGenerator(rescale=1./255)
test_data = test_gen.flow_from_directory(
    'data/test', target_size=img_size, color_mode='grayscale',
    batch_size=32, class_mode='binary', shuffle=False)

loss, acc = model.evaluate(test_data)
print(f"🎯 Test Accuracy: {acc*100:.2f}%")
# 📊 Precision, Recall, F1-score
from sklearn.metrics import classification_report, confusion_matrix
import numpy as np

# Dự đoán nhãn cho tập test
y_pred_probs = model.predict(test_data)
y_pred = (y_pred_probs > 0.5).astype(int).flatten()

# Lấy nhãn thật
y_true = test_data.classes

# In báo cáo
print("\n📊 Classification Report:")
print(classification_report(y_true, y_pred, target_names=['Noise', 'Earthquake']))

# In confusion matrix
print("\n🧮 Confusion Matrix:")
print(confusion_matrix(y_true, y_pred))

import matplotlib.pyplot as plt

plt.figure(figsize=(12, 5))

# 🎯 Accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)

# 📉 Loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

from google.colab import files
files.download("best_model.h5")
